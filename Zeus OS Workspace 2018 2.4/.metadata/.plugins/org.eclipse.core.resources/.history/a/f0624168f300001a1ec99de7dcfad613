package edu.sru.thangiah.zeus.top;

//import the parent class
import edu.sru.thangiah.zeus.core.*;
import edu.sru.thangiah.zeus.top.TOPNodes;

/**
 *
 * <p>
 * Title:
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005
 * </p>
 * <p>
 * Company:
 * </p>
 * 
 * @author Sam R. Thangiah
 * @version 2.0
 */

public class TOPNodesLinkedList extends NodesLinkedList implements java.io.Serializable, java.lang.Cloneable {

	private static final long serialVersionUID = 1L;

	public TOPNodesLinkedList() {
		setHead(new TOPNodes());
		setTail(new TOPNodes());
		linkHeadTail();
		setAttributes(new TOPAttributes());
	}

	/**
	 * Constructor
	 * 
	 * @param tT     truck type
	 * @param depotX depot x-coordinate
	 * @param depotY depot y-coordinate
	 */
	public TOPNodesLinkedList(TOPTruckType tT, double depotX, double depotY, int tN) {

		// super(tT, depotX, depotY, tN);
		setTruckType(tT);
		setTruckNum(tN);
		// Set the feasibility check to be done for the route
		setFeasibility(new TOPFeasibility(getTruckType().getMaxDuration(), getTruckType().getMaxCapacity(), this));
		setHead(new TOPNodes(new TOPShipment(0, depotX, depotY, 0, "D", "D")));
		setTail(new TOPNodes(new TOPShipment(-1, depotX, depotY, 0, "D", "D")));
		linkHeadTail();
		// assign the TOP attributes
		setAttributes(new TOPAttributes());
	}

	/**
	 * Constructor
	 * 
	 * @param tT     truck type
	 * @param depotX depot x-coordinate
	 * @param depotY depot y-coordinate
	 */
	public TOPNodesLinkedList(TOPTruckType tT, float depotX, float depotY, float endDepotX, float endDepotY, int tN) {
		setTruckType(tT);
		setTruckNum(tN);
		setFeasibility(new TOPFeasibility(getTruckType().getMaxDuration(), getTruckType().getMaxCapacity(), this));
		setHead(new TOPNodes(new TOPShipment(0, depotX, depotY, 0, "D", "D")));
		setTail(new TOPNodes(new TOPShipment(-1, endDepotX, endDepotY, 0, "D", "D")));
		linkHeadTail();

		// assign the TOP attributes
		setAttributes(new TOPAttributes());
	}

	/**
	 * New constructor for two depots
	 * 
	 * @param tT
	 * @param startDepotX
	 * @param startDepotY
	 * @param endDepotID
	 * @param endDepotX
	 * @param endDepotY
	 * @param tN
	 */
	public TOPNodesLinkedList(TOPTruckType tT, double startDepotX, double startDepotY, int endDepotID, double endDepotX,
			double endDepotY, int tN) {

		// super(tT, depotX, depotY, tN);
		setTruckType(tT);
		setTruckNum(tN);
		// Set the feasibility check to be done for the route
		setFeasibility(new TOPFeasibility(getTruckType().getMaxDuration(), getTruckType().getMaxCapacity(), this));
		setHead(new TOPNodes(new TOPShipment(0, startDepotX, startDepotY, 0, "D", "D")));
		setTail(new TOPNodes(new TOPShipment(endDepotID, endDepotX, endDepotY, 0, "D", "D")));
		linkHeadTail();
		// assign the TOP attributes
		setAttributes(new TOPAttributes());
	}

	/**
	 * Returns the last cell in the linked list
	 * 
	 * @return TOPNodes
	 */
	public TOPNodes getTOPTail() {
		return (TOPNodes) getTail();
	}

	/**
	 * Returns the attributes of the linked list
	 * 
	 * @return TOPAttributes
	 */
	public TOPAttributes getTOPAttributes() {
		return (TOPAttributes) getAttributes();
	}

	/**
	 * Returns the feasibility of the linked list
	 * 
	 * @return TOPFeasibility
	 */
	public TOPFeasibility getTOPFeasibility() {
		return (TOPFeasibility) getFeasibility();
	}

	/**
	 * Returns the type of truck associated with this linked list
	 * 
	 * @return TOPTruckType
	 */
	public TOPTruckType getTOPTruckType() {
		return (TOPTruckType) getTruckType();
	}

	/**
	 * Returns the first cell in the linked list
	 * 
	 * @return first cell
	 */
	public TOPNodes getTOPHead() {
		return (TOPNodes) getHead();
	}

	/**
	 * This is a stub - Leave it as it is The concrere getInsertShipment will be
	 * declared by the class inheriting this class and implementing the actual
	 * insertion of shipment *
	 * 
	 * @param currNodesLL current nodes linked list
	 * @param theShipment shipment to be inserted
	 * @return true if inserted, false if not
	 */

	public boolean getInsertShipment(TOPNodesLinkedList currNodeLL, TOPShipment theShipment) {
		return false;
	}

	/**
	 * Inserts a shipment into the route, creating a new Nodes for the Shipment.
	 * Will attempt to put the newly created point cell into every possible location
	 * in the route in an attempt to find the best possible initial solution.
	 * 
	 * @param theShipment the shipment to insert
	 * @return true if inserted, false if not
	 */
	public boolean insertShipment(Shipment theShipment) {
		// method for inserting the shipment into a truck

		TOPNodesLinkedList status = (TOPNodesLinkedList) ZeusProblemInfo.getInsertShipType();
		return status.getInsertShipment(this, (TOPShipment) theShipment);
	}

	/**
	 * Same as insertShipment except the insertion parameter must be specified as a
	 * point cell and also the previous point cell is returned. This method is used
	 * by the local optimization methods
	 * 
	 * @param insertNode Nodes that is to be inserted into the route
	 * @return Nodes that is previous to the inserted Nodes.
	 */
	/**
	 * @todo This method should be inside the class that inherits the
	 *       NodesLinkedList
	 */
	public Nodes insertNodes(Nodes insertNode) {
		boolean isDiagnostic = false;
		Nodes pcBeforeInsertNode = null;
		Shipment theShipment = insertNode.getShipment();

		if (isDiagnostic) {
			System.out.println("========================================");
			System.out.println("In InsertNodes in Nodeslinked list");
			System.out.println("Nodes to be inserted " + theShipment.getIndex());
			System.out.println("Route to be inserted " + this.getRouteString());
			System.out.println("Cost before insertion " + this.getCost());
		}

		// the route is empty
		if (getHead().getNext() == getTail()) {
			getHead().setNext(insertNode);
			getTail().setPrev(insertNode);
			insertNode.setPrev(getHead());
			insertNode.setNext(getTail());

			pcBeforeInsertNode = getHead(); // return head depot

			if (isDiagnostic) {
				System.out.println("Route is empty");
				System.out.println("After inserting the node " + this.getRouteString());
			}

			if (getFeasibility().isFeasible()) {
				this.removeNodes(insertNode); // route is infeasible, remove this cell
				if (isDiagnostic) {
					System.out.println("Insertion infeasible - Returning null");
					System.out.println("Returning to original route " + this.getRouteString());
					System.out.println("================== Exiting insertNodes ");
				}
				return null;
			}
		}
		// the route is not empty
		else {
			double cost = Double.MAX_VALUE;
			Nodes costCell = null; // cell after which the new cell was inserted to achieve cost
			Nodes prevCell = getHead();
			Nodes nextCell = getHead().getNext();

			if (isDiagnostic) {
				System.out.println("Route is not empty");
			}

			// loop through all the cells looking for the cheapest place to put the
			// new cell.
			while (nextCell != null) {
				// insert the cell after current prevCell
				prevCell.setNext(insertNode);
				insertNode.setPrev(prevCell);
				insertNode.setNext(nextCell);
				nextCell.setPrev(insertNode);

				// calculate the cost
				// double tempCost = ProblemInfo.nodesLLLevelCostF.getTotalConstraintCost(this);
				// double tempCost = 0; // ------------- FIX THIS ---------------
				double tempCost = ZeusProblemInfo.getNodesLLLevelCostF().getTotalCost(this);
				if (isDiagnostic) {
					System.out.println("After inserting node " + this.getRouteString());
					System.out.println("Cost after insertion " + tempCost);
				}

				// check to see if the new route exceeds the maximum distance allowed
				if (getFeasibility().isFeasible()) {
					// decide if this cell should be saved
					if (tempCost < cost) {
						cost = tempCost;
						costCell = prevCell;
					}
					if (isDiagnostic) {
						System.out.println("Insertion is feasible ");
						System.out.println("Cost before and after insertion " + cost + " " + tempCost);
					}
				}

				// remove the new cell
				prevCell.setNext(nextCell);
				nextCell.setPrev(prevCell);
				insertNode.setNext(null);
				insertNode.setPrev(null);
				if (isDiagnostic) {
					System.out.println("After removing the node from the route " + this.getRouteString());
				}

				// set prevCell and nextCell to the next cells in linked list
				prevCell = nextCell;
				nextCell = prevCell.getNext();
			}

			if (costCell != null) {
				// put the cell in the cheapest place you found
				prevCell = costCell;
				nextCell = prevCell.getNext();
				prevCell.setNext(insertNode);
				insertNode.setPrev(prevCell);
				insertNode.setNext(nextCell);
				nextCell.setPrev(insertNode);

				pcBeforeInsertNode = prevCell;
				if (isDiagnostic) {
					System.out.println("Cost is not null");
					System.out.println("After inserting the cell in the cheapest place found" + this.getRouteString());
				}
			} else {
				if (isDiagnostic) {
					System.out.println("Cost is null");
				}
				return null;
			}
		}
		theShipment.setIsAssigned(true);
		// ProblemInfo.nodesLLLevelCostF.calculateTotalsStats(this);
		return pcBeforeInsertNode;
	}

	/**
	 * Removes the node with the lowest demand from the list Added by David Crissman
	 */
	public void removeLowestScoringShipment() {
		float lowScore = Float.MAX_VALUE;
		TOPNodes currentNode, lowestNode;

		// Find the node with the lowest demand
		lowestNode = null;
		currentNode = getTOPHead();
		while (currentNode != null) {

			if (currentNode.getShipment().getTruckTypeNeeded() != "D") {
				if (currentNode.getShipment().getDemand() < lowScore) {
					lowestNode = currentNode;
					lowScore = currentNode.getShipment().getDemand();
				}
			}

			currentNode = (TOPNodes) currentNode.getNext();
		}
	}

	/**
	 * This was in the LinearGreedyInsertShipment class and was move to the
	 * TOPNodesLinkedList class
	 * 
	 * @return Object
	 */
	public Object clone() {
		TOPNodesLinkedList clonedNodesLinkedList = new TOPNodesLinkedList();

		clonedNodesLinkedList.setAttributes((TOPAttributes) this.getTOPAttributes().clone());
		if (this.getFeasibility() != null)
			clonedNodesLinkedList.setFeasibility((TOPFeasibility) this.getFeasibility().clone());
		else
			clonedNodesLinkedList.setFeasibility(new TOPFeasibility());
		if (this.getTruckType() != null)
			clonedNodesLinkedList.setTruckType((TOPTruckType) this.getTruckType().clone());
		else
			clonedNodesLinkedList.setTruckType(new TOPTruckType());
		clonedNodesLinkedList.setTruckNum(this.getTruckNum());
		clonedNodesLinkedList.setHead((TOPNodes) this.getTOPHead().clone());

		this.expandRoute();

		// If the list is not empty, add each node to the clone
		if (this.getTOPHead() != this.getTOPTail()) {
			TOPNodes currentNodes = clonedNodesLinkedList.getTOPHead();
			TOPNodes nextNodes = this.getTOPHead().getTOPNext();

			while (nextNodes != null) {
				currentNodes.setNext((TOPNodes) nextNodes.clone()); // create the next depot
				currentNodes.getTOPNext().setPrev(currentNodes); // set the next depot's prev
				currentNodes = currentNodes.getTOPNext();
				nextNodes = nextNodes.getTOPNext();

				// Once next is null, we have found the tail of the list
				if (nextNodes == null) {
					clonedNodesLinkedList.setTail(currentNodes);
					currentNodes.setNext(null);
				}
			}
		} else {
			clonedNodesLinkedList.setTail(clonedNodesLinkedList.getHead());
		}

		// Set the route for the feasibility
		clonedNodesLinkedList.getTOPFeasibility().setRoute(clonedNodesLinkedList);

		return clonedNodesLinkedList;
	}
}

class LinearGreedyInsertShipment extends TOPNodesLinkedList {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public boolean getInsertShipment(TOPNodesLinkedList currNodeLL, TOPShipment theShipment) {

		TOPNodes tmpPtr;
		// currNodeLL is the reference to the current node linked list being considered
		// for insertion
		// theShipment is the shipment to be inserted
		TOPNodes theCell = new TOPNodes(theShipment);

		// the route is empty
		if (currNodeLL.getHead().getNext() == currNodeLL.getTail()) {
			currNodeLL.setHeadNext(theCell);
			currNodeLL.getTail().setPrev(theCell);
			theCell.setPrev(currNodeLL.getHead());
			theCell.setNext(currNodeLL.getTail());

			// print out current route
			/*
			 * { System.out.println("Printing TOPNodesLinkedList"); TOPNodes tempPtr=
			 * (TOPNodes)currNodeLL.getHead(); while (tempPtr !=
			 * (TOPNodes)currNodeLL.getTail()) {
			 * System.out.println("Node number and Demand is:"+tempPtr.getIndex()+" "
			 * +tempPtr.getDemand()); tempPtr = tempPtr.getTOPNext(); }
			 * System.out.println("Done Printing"); }
			 */

			// if its not feasible, return route to what it was and return false
			if (!currNodeLL.getFeasibility().isFeasible()) {
				// remove the inserted node
				tmpPtr = (TOPNodes) currNodeLL.getHead().getNext();
				tmpPtr.setNext(null);
				tmpPtr.setPrev(null);

				// point the head and tail to each other
				currNodeLL.setHeadNext(currNodeLL.getTail());
				currNodeLL.getTail().setPrev(currNodeLL.getHead());

				// print out current route
				/*
				 * { System.out.println("Printing Undo TOPNodesLinkedList"); TOPNodes tempPtr=
				 * (TOPNodes)currNodeLL.getHead(); while (tempPtr !=
				 * (TOPNodes)currNodeLL.getTail()) {
				 * System.out.println("Node number and Demand is:"+tempPtr.getIndex()+" "
				 * +tempPtr.getDemand()); tempPtr = tempPtr.getTOPNext(); }
				 * System.out.println("Done Printing"); }
				 */

				return false;
			}
		}
		// the route is not empty
		else {
			double cost = Double.MAX_VALUE;
			TOPNodes costCell = null; // cell after which the new cell was inserted to achieve cost
			TOPNodes prevCell = (TOPNodes) currNodeLL.getHead();
			TOPNodes nextCell = (TOPNodes) currNodeLL.getHead().getNext();

			while (nextCell != currNodeLL.getTail()) {
				// insert the cell after current prevCell
				prevCell.setNext(theCell);
				theCell.setPrev(prevCell);
				theCell.setNext(nextCell);
				nextCell.setPrev(theCell);

				// check to see if the new route is feasible
				if (currNodeLL.getFeasibility().isFeasible()) {
					// calculate the cost
					double tempCost = ZeusProblemInfo.getNodesLLLevelCostF().getTotalCost(currNodeLL);

					// decide if this cell should be saved
					if (tempCost < cost) {
						cost = tempCost;
						costCell = prevCell;
					}
				}
				// remove the new cell
				prevCell.setNext(nextCell);
				nextCell.setPrev(prevCell);
				theCell.setNext(null);
				theCell.setPrev(null);

				// set prevCell and nextCell to the next cells in linked list
				prevCell = nextCell;
				nextCell = (TOPNodes) prevCell.getNext();
				// print out current route
				/*
				 * { System.out.println("Printing TOPNodesLinkedList"); TOPNodes tempPtr=
				 * (TOPNodes)currNodeLL.getHead(); while (tempPtr !=
				 * (TOPNodes)currNodeLL.getTail()) {
				 * System.out.println("Node number and Demand is:"+tempPtr.getIndex()+" "
				 * +tempPtr.getDemand()); tempPtr = tempPtr.getTOPNext(); }
				 * System.out.println("Done Printing"); }
				 */
			}

			if (costCell != null) {
				prevCell = costCell;
				nextCell = (TOPNodes) prevCell.getNext();
				prevCell.setNext(theCell);
				theCell.setPrev(prevCell);
				theCell.setNext(nextCell);
				nextCell.setPrev(theCell);
			} else {
				return false;
			}
		}

		theShipment.setIsAssigned(true);
		ZeusProblemInfo.getNodesLLLevelCostF().calculateTotalsStats(currNodeLL);

		{
			System.out.println("Route is:");
			TOPNodes tempPtr = (TOPNodes) currNodeLL.getHead();
			while (tempPtr != (TOPNodes) currNodeLL.getTail()) {
				System.out.print(tempPtr.getIndex() + "(" + tempPtr.getDemand() + ")-");
				tempPtr = tempPtr.getTOPNext();
			}
			System.out.println();
		}

		return true;
	}

	// The WhoAmI methods gives the id of the assigned object
	// It is a static method so that it can be accessed without creating an object
	public static String WhoAmI() {
		return ("Insertion Type: Linear greedy insertion heuristic");
	}

	class TOPEllipse extends TOPNodesLinkedList {
		private double focusAX, focusAY, focusBX, focusBY, sumDistance;
		private double centerX, centerY, semiMajorAxis, semiMinorAxis;

		// Constructor
		public TOPEllipse(double ax, double ay, double bx, double by, double dist) {
			double fociDistance;

			focusAX = ax;
			focusAY = ay;
			focusBX = bx;
			focusBY = by;
			sumDistance = dist;

			centerX = focusAX + ((focusBX - focusAX) / 2.0);
			centerY = focusAY + ((focusBY - focusAY) / 2.0);

			fociDistance = Math.sqrt(Math.pow(focusBX - focusAY, 2) + Math.pow(focusBY - focusAY, 2));
			semiMinorAxis = Math.sqrt(Math.pow((sumDistance / 2.0), 2) - Math.pow((fociDistance / 2.0), 2));
			semiMajorAxis = sumDistance / 2.0;
		}

		/**
		 * Returns the polar angle (between PI/2 and -PI/2) defined by the two foci of
		 * the ellipse
		 * 
		 * @return double
		 */
		public double getAngle() {
			double ang = 0;

			if (focusBX == focusAX) {
				if (focusBY >= focusAY) {
					ang = Math.PI / 2.0;
				} else {
					ang = Math.PI / -2.0;
				}
			} else {
				ang = Math.atan((focusBY - focusAY) / (focusBX - focusAX));
			}

			return ang;

		}

		/**
		 * Returns the x-coordinate of the ellipse's center
		 * 
		 * @return double
		 */
		public double getCenterX() {
			return centerX;
		}

		/**
		 * Returns the y-coordinate of the ellipse's center
		 * 
		 * @return double
		 */
		public double getCenterY() {
			return centerY;
		}

		/**
		 * Returns the semi-major axis of the ellipse
		 * 
		 * @return double
		 */
		public double getSemiMajorAxis() {
			return semiMajorAxis;
		}

		/**
		 * Returns the semi-minor axis of the ellipse
		 * 
		 * @return double
		 */
		public double getSemiMinorAxis() {
			return semiMinorAxis;
		}

		/**
		 * Resizes the ellipse by changing the value of its semi-minor axis
		 * 
		 * @param axis double
		 */
		public void setSemiMinorAxis(double axis) {
			if (axis >= 0.0) {
				semiMinorAxis = axis;
			} else {
				System.out.println("TOPEllipse::setSemiMinorAxis - Value must be non-negative. Using 0.0 instead");
				semiMinorAxis = 0.0;
			}
			sumDistance = Math.sqrt(
					Math.pow(2.0 * semiMinorAxis, 2) + Math.pow(focusBX - focusAX, 2) + Math.pow(focusBY - focusAY, 2));
			semiMajorAxis = sumDistance / 2.0;
		}

		/**
		 * Resizes the ellipse by changing the sum of the distances from the foci, which
		 * defines the edge of the ellipse
		 * 
		 * @param dist double
		 */
		public void setDistance(double dist) {
			double fociDistance;

			fociDistance = Math.sqrt(Math.pow(focusBX - focusAY, 2) + Math.pow(focusBY - focusAY, 2));
			if (dist >= fociDistance) {
				sumDistance = dist;
			} else {
				System.out.println(
						"TOPEllipse::setDistance - Value must be greater than or equal to the distance between the foci. Using fociDistance instead");
				sumDistance = fociDistance;
			}
			semiMinorAxis = Math.sqrt(Math.pow((sumDistance / 2.0), 2) - Math.pow((fociDistance / 2.0), 2));
			semiMajorAxis = sumDistance / 2.0;
		}

		/**
		 * Moves the ellipse by the specified distance
		 * 
		 * @param x double
		 * @param y double
		 */
		public void translate(double x, double y) {
			focusAX += x;
			focusBX += x;
			focusAY += y;
			focusBY += y;
			centerX += x;
			centerY += y;
		}

		/**
		 * Rotates the ellipse around a specified center point by a specified number of
		 * radians
		 * 
		 * @param angle double
		 * @param cx    double
		 * @param cy    double
		 */
		public void rotate(double angle, double cx, double cy) {
			double tempX;

			focusAX += cx;
			focusAY += cy;
			tempX = ((focusAX * Math.cos(angle)) - (focusAY * Math.sin(angle))) - cx;
			focusAY = ((focusAX * Math.sin(angle)) + (focusAY * Math.cos(angle))) - cy;
			focusAX = tempX;

			focusBX += cx;
			focusBY += cy;
			tempX = ((focusBX * Math.cos(angle)) - (focusBY * Math.sin(angle))) - cx;
			focusBY = ((focusBX * Math.sin(angle)) + (focusBY * Math.cos(angle))) - cy;
			focusBX = tempX;

			centerX += cx;
			centerY += cy;
			tempX = ((centerX * Math.cos(angle)) - (centerY * Math.sin(angle))) - cx;
			centerY = ((centerX * Math.sin(angle)) + (centerY * Math.cos(angle))) - cy;
			centerX = tempX;
		}

		/**
		 * Returns whether or not the point is within the bounds of the ellipse
		 * 
		 * @param pointX double
		 * @param pointY double
		 * @return boolean
		 */
		public boolean pointInsideEllipse(double pointX, double pointY) {
			double distA, distB;

			distA = Math.sqrt(Math.pow(focusAX - pointX, 2) + Math.pow(focusAY - pointY, 2));
			distB = Math.sqrt(Math.pow(focusBX - pointX, 2) + Math.pow(focusBY - pointY, 2));

			return ((distA + distB) < sumDistance);
		}
	}
}
